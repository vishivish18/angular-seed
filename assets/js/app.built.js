var app=angular.module("app",["ngRoute","ui.router"]);angular.module("app").controller("homeCtrl",["$scope","$http",function(o,t){console.log("homeCtrl"),o.header=" Home Page",o.title=" Home Title",o.content=" Home content"}]),angular.module("app").controller("loginCtrl",["$scope","$http","$window","auth",function(o,t,e,n){console.log("loginCtrl"),console.log(n.testServiceFunction(2)),o.login=function(){o.signupData={username:o.username,password:o.password},console.log("Login button is clicked"),t.post("https://12f1b606.ngrok.io/api/auth/login",o.signupData).then(function(o){o.data.status?(console.log(o),localStorage.setItem("token",o.data.result.token),t.defaults.headers.common["x-auth"]=localStorage.getItem("token"),window.location.href="/home"):e.toastr.error(o.data.message)})}}]),angular.module("app").controller("masterCtrl",["$scope","$http","$rootScope",function(o,t,e){console.log("masterCtrl")}]),angular.module("app").controller("menuCtrl",["$scope","$http","auth",function(o,t,e){console.log("menuCtrl"),console.log(e.testServiceFunction(2)),o.login=function(){console.log("Login button is clicked"),t.post("https://12f1b606.ngrok.io/api/auth/login",{username:"moni",password:"123456"},function(t){t&&(console.log(t),o.body)})}}]),app.controller("navCtrl",["$scope","$location","$http",function(o,t,e){o.logout=function(){console.log(localStorage.getItem("token")),localStorage.removeItem("token"),console.log(localStorage.getItem("token")),delete e.defaults.headers.common["x-auth"],t.path("/")}}]),app.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(o,t,e){t.otherwise("/"),o.state("login",{url:"/",views:{content:{templateUrl:"../app/views/login.html",controller:"loginCtrl"}}}).state("app",{url:"/home",views:{header:{templateUrl:"../app/views/nav.html",controller:"navCtrl"},content:{templateUrl:"../views/home.html",controller:"homeCtrl"}}}).state("app.menu",{url:"menu",views:{"content@":{templateUrl:"../app/views/menu.html",controller:"menuCtrl"}}}),e.html5Mode(!0)}]),angular.module("app").service("auth",["$http",function(o){return{testServiceFunction:function(o){return"This is from service "+o}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImNvbnRyb2xsZXJzL2hvbWVDdHJsLmpzIiwiY29udHJvbGxlcnMvbG9naW5DdHJsLmpzIiwiY29udHJvbGxlcnMvbWFzdGVyQ3RybC5qcyIsImNvbnRyb2xsZXJzL21lbnVDdHJsLmpzIiwiY29udHJvbGxlcnMvbmF2Q3RybC5qcyIsImNvbnRyb2xsZXJzL3JvdXRlcy5qcyIsInNlcnZpY2VzL2F1dGguanMiXSwibmFtZXMiOlsiYXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkaHR0cCIsImNvbnNvbGUiLCJsb2ciLCJoZWFkZXIiLCJ0aXRsZSIsImNvbnRlbnQiLCIkd2luZG93IiwiYXV0aCIsInRlc3RTZXJ2aWNlRnVuY3Rpb24iLCJsb2dpbiIsInNpZ251cERhdGEiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwicG9zdCIsInRoZW4iLCJyZXNwb25zZSIsImRhdGEiLCJzdGF0dXMiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwicmVzdWx0IiwidG9rZW4iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJnZXRJdGVtIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwidG9hc3RyIiwiZXJyb3IiLCJtZXNzYWdlIiwiJHJvb3RTY29wZSIsImJvZHkiLCIkbG9jYXRpb24iLCJsb2dvdXQiLCJyZW1vdmVJdGVtIiwicGF0aCIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJzdGF0ZSIsInVybCIsInZpZXdzIiwidGVtcGxhdGVVcmwiLCJjb250ZW50QCIsImh0bWw1TW9kZSIsInNlcnZpY2UiLCJwYXJhbSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUEsSUFBQUMsUUFBQUMsT0FBQSxPQUNBLFVBQUEsY0NEQUQsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLFlBQUEsU0FBQSxRQUFBLFNBQUFDLEVBQUFDLEdBQ0FDLFFBQUFDLElBQUEsWUFDQUgsRUFBQUksT0FBQSxhQUNBSixFQUFBSyxNQUFBLGNBQ0FMLEVBQUFNLFFBQUEsbUJDTEFULFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsUUFBQSxVQUFBLE9BQUEsU0FBQUMsRUFBQUMsRUFBQU0sRUFBQUMsR0FDQU4sUUFBQUMsSUFBQSxhQUNBRCxRQUFBQyxJQUFBSyxFQUFBQyxvQkFBQSxJQUVBVCxFQUFBVSxNQUFBLFdBQ0FWLEVBQUFXLFlBQ0FDLFNBQUFaLEVBQUFZLFNBQ0FDLFNBQUFiLEVBQUFhLFVBRUFYLFFBQUFDLElBQUEsMkJBQ0FGLEVBQUFhLEtBQUEsMkNBQUFkLEVBQUFXLFlBQ0FJLEtBQUEsU0FBQUMsR0FDQUEsRUFBQUMsS0FBQUMsUUFDQWhCLFFBQUFDLElBQUFhLEdBQ0FHLGFBQUFDLFFBQUEsUUFBQUosRUFBQUMsS0FBQUksT0FBQUMsT0FDQXJCLEVBQUFzQixTQUFBQyxRQUFBQyxPQUFBLFVBQUFOLGFBQUFPLFFBQUEsU0FFQUMsT0FBQUMsU0FBQUMsS0FBQSxTQUlBdEIsRUFBQXVCLE9BQUFDLE1BQUFmLEVBQUFDLEtBQUFlLGVDdEJBbkMsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGNBQUEsU0FBQSxRQUFBLGFBQUEsU0FBQUMsRUFBQUMsRUFBQWdDLEdBRUEvQixRQUFBQyxJQUFBLGlCQ0hBTixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsWUFBQSxTQUFBLFFBQUEsT0FBQSxTQUFBQyxFQUFBQyxFQUFBTyxHQUNBTixRQUFBQyxJQUFBLFlBQ0FELFFBQUFDLElBQUFLLEVBQUFDLG9CQUFBLElBQ0FULEVBQUFVLE1BQUEsV0FDQVIsUUFBQUMsSUFBQSwyQkFDQUYsRUFBQWEsS0FBQSw0Q0FBQUYsU0FBQSxPQUFBQyxTQUFBLFVBQUEsU0FBQUcsR0FDQUEsSUFDQWQsUUFBQUMsSUFBQWEsR0FDQWhCLEVBQUFrQyxZQ1JBdEMsSUFBQUcsV0FBQSxXQUFBLFNBQUEsWUFBQSxRQUFBLFNBQUFDLEVBQUFtQyxFQUFBbEMsR0FFQUQsRUFBQW9DLE9BQUEsV0FDQWxDLFFBQUFDLElBQUFnQixhQUFBTyxRQUFBLFVBQ0FQLGFBQUFrQixXQUFBLFNBQ0FuQyxRQUFBQyxJQUFBZ0IsYUFBQU8sUUFBQSxpQkFDQXpCLEVBQUFzQixTQUFBQyxRQUFBQyxPQUFBLFVBQ0FVLEVBQUFHLEtBQUEsU0NSQTFDLElBQUEyQyxRQUFBLGlCQUFBLHFCQUFBLG9CQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0FELEVBQUFFLFVBQUEsS0FDQUgsRUFDQUksTUFBQSxTQUNBQyxJQUFBLElBQ0FDLE9BQ0F4QyxTQUNBeUMsWUFBQSwwQkFDQWhELFdBQUEsZ0JBS0E2QyxNQUFBLE9BQ0FDLElBQUEsUUFDQUMsT0FDQTFDLFFBQ0EyQyxZQUFBLHdCQUNBaEQsV0FBQSxXQUVBTyxTQUNBeUMsWUFBQSxxQkFDQWhELFdBQUEsZUFLQTZDLE1BQUEsWUFDQUMsSUFBQSxPQUNBQyxPQUNBRSxZQUNBRCxZQUFBLHlCQUNBaEQsV0FBQSxlQUtBMkMsRUFBQU8sV0FBQSxNQ3JDQXBELFFBQUFDLE9BQUEsT0FDQW9ELFFBQUEsUUFBQSxRQUFBLFNBQUFqRCxHQUNBLE9BQ0FRLG9CQUVBLFNBQUEwQyxHQUNBLE1BQUEsd0JBQUFBIiwiZmlsZSI6ImFwcC5idWlsdC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xuICAgICduZ1JvdXRlJywgJ3VpLnJvdXRlcidcbl0pXG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdob21lQ3RybCcgLCBmdW5jdGlvbigkc2NvcGUsICRodHRwICkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImhvbWVDdHJsXCIpO1xuICAgICAgICAkc2NvcGUuaGVhZGVyID0gXCIgSG9tZSBQYWdlXCJcbiAgICAgICAgJHNjb3BlLnRpdGxlID0gXCIgSG9tZSBUaXRsZVwiXG4gICAgICAgICRzY29wZS5jb250ZW50ID0gXCIgSG9tZSBjb250ZW50XCJcblxuICAgIH0pXG5cblxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignbG9naW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJHdpbmRvdyAsYXV0aCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibG9naW5DdHJsXCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGF1dGgudGVzdFNlcnZpY2VGdW5jdGlvbigyKSlcclxuXHJcbiAgICAgICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5zaWdudXBEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgXCJ1c2VybmFtZVwiOiAkc2NvcGUudXNlcm5hbWUsXHJcbiAgICAgICAgICAgICAgICBcInBhc3N3b3JkXCI6ICRzY29wZS5wYXNzd29yZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTG9naW4gYnV0dG9uIGlzIGNsaWNrZWRcIilcclxuICAgICAgICAgICAgJGh0dHAucG9zdCgnaHR0cHM6Ly8xMmYxYjYwNi5uZ3Jvay5pby9hcGkvYXV0aC9sb2dpbicsICRzY29wZS5zaWdudXBEYXRhKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgaWYocmVzcG9uc2UuZGF0YS5zdGF0dXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9rZW4nLCByZXNwb25zZS5kYXRhLnJlc3VsdC50b2tlbilcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsneC1hdXRoJ10gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKVxyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID1cIi9ob21lXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy50b2FzdHIuZXJyb3IocmVzcG9uc2UuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuXHJcbiAgICB9KSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdtYXN0ZXJDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJHJvb3RTY29wZSkge1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwibWFzdGVyQ3RybFwiKTsgICAgICAgIFxuICAgICAgIFxuICAgIH0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignbWVudUN0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCBhdXRoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwibWVudUN0cmxcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKGF1dGgudGVzdFNlcnZpY2VGdW5jdGlvbigyKSlcbiAgICAgICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvZ2luIGJ1dHRvbiBpcyBjbGlja2VkXCIpXG4gICAgICAgICAgICAkaHR0cC5wb3N0KCdodHRwczovLzEyZjFiNjA2Lm5ncm9rLmlvL2FwaS9hdXRoL2xvZ2luJywgeyBcInVzZXJuYW1lXCI6IFwibW9uaVwiLCBcInBhc3N3b3JkXCI6IFwiMTIzNDU2XCIgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ib2R5XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cblxuXG5cbiAgICB9KSIsIid1c2Ugc3RyaWN0JztcbmFwcC5jb250cm9sbGVyKCduYXZDdHJsJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywnJGh0dHAnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sJGh0dHApIHtcbiBcbiAgICAkc2NvcGUubG9nb3V0PWZ1bmN0aW9uKCkge1xuICAgIFx0Y29uc29sZS5sb2cobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJykpXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndG9rZW4nKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpKVxuICAgICAgICAgICAgZGVsZXRlICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWyd4LWF1dGgnXVxuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvXCIpXG5cblxuXG4gICAgICAgIH1cblxufV0pOyIsIlx0YXBwLmNvbmZpZyhmdW5jdGlvbigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xuXHQgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuXHQgICAgJHN0YXRlUHJvdmlkZXJcblx0ICAgICAgICAuc3RhdGUoJ2xvZ2luJywge1xuXHQgICAgICAgICAgICB1cmw6ICcvJyxcblx0ICAgICAgICAgICAgdmlld3M6IHtcblx0ICAgICAgICAgICAgICAgICdjb250ZW50Jzoge1xuXHQgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vYXBwL3ZpZXdzL2xvZ2luLmh0bWwnLFxuXHQgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdsb2dpbkN0cmwnXG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KVxuXG5cdCAgICAgICAgLnN0YXRlKCdhcHAnLCB7XG5cdCAgICAgICAgICAgIHVybDogJy9ob21lJyxcblx0ICAgICAgICAgICAgdmlld3M6IHtcblx0ICAgICAgICAgICAgICAgICdoZWFkZXInOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi9hcHAvdmlld3MvbmF2Lmh0bWwnLFxuXHQgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICduYXZDdHJsJ1xuXHQgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgICdjb250ZW50Jzoge1xuXHQgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvaG9tZS5odG1sJyxcblx0ICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnaG9tZUN0cmwnXG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KVxuXG5cdCAgICAuc3RhdGUoJ2FwcC5tZW51Jywge1xuXHQgICAgICAgIHVybDogJ21lbnUnLFxuXHQgICAgICAgIHZpZXdzOiB7XG5cdCAgICAgICAgICAgICdjb250ZW50QCc6IHtcblx0ICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vYXBwL3ZpZXdzL21lbnUuaHRtbCcsXG5cdCAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWVudUN0cmwnXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgIH0pXG5cdCAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSlcblxuXHR9KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuc2VydmljZSgnYXV0aCcsIGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXN0U2VydmljZUZ1bmN0aW9uOiB0ZXN0U2VydmljZUZ1bmN0aW9uXG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdGVzdFNlcnZpY2VGdW5jdGlvbihwYXJhbSkge1xuICAgICAgICBcdHJldHVybiBcIlRoaXMgaXMgZnJvbSBzZXJ2aWNlIFwiK3BhcmFtXG4gICAgICAgIH1cbiAgICB9KSJdfQ==
